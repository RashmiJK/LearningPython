1. How to see list of functions inside module in Python
    dir(module_name)

2. Anaconda python distribution can be installed from https://www.continuum.io/downloads

3. Third party packages of interest here : 
    *numpy
    *imatplotlib
    *ipython - error
    *jupyter notebook
    *requests
    *bs4
    *pillow
    *flask
    *basemap - error - used below to overcome error
        [1] Installed brew - package manager for MAC
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        This is to install geos

        [2] Then tried brew install geos
        Seems like worked successfully

        [3] pip3 install https://github.com/matplotlib/basemap/archive/v1.1.0.tar.gz
        Shows message as success, but when imported in IDLE, it shows error

        [4] Downgrade pyproj to version 1.9.6 using below command
        pip3 install pyproj==1.9.6
        This is done to overcome the error

            >>> from mpl_toolkits.basemap import Basemap
            Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            File "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/mpl_toolkits/basemap/__init__.py", line 152, in <module>
                epsgf = open(os.path.join(pyproj.pyproj_datadir,'epsg'))
            AttributeError: module 'pyproj' has no attribute 'pyproj_datadir'

        [5] In python3 IDLE, run the following
        >>> import mpl_toolkits
        >>> import mpl_toolkits.basemap
    *geopy
    *line_profiler - error - used below to overcome error
        git clone https://github.com/rkern/line_profiler.git
        find line_profiler -name '*.pyx' -exec cython {} \;
        cd line_profiler && pip install . --user
    *memory_profiler

4. String -> List : use split() method
   List -> String : use join() method

5. Negative indexing in slicing
   -1 is the last element
   Slicing happens until (last mentioned index -1)

6. Looping through dictionaries
   for key,value in dict.items()

7. Comprehensions - They are the way to run a loop within a single line of code and
    to collect the results of the loop in a collection
	List comprehension : function/apply operation to every element(element) for element in iterator if condition(element)

8. Generators : Shortcut to write functions that implement iterators   
   List comprehension : [i for i in range(20) if i%2==0]
   Lets replace square brackets with parenthesis and assign it to a variable, it
   will become a iterator
   even = (i for i in range(20) if i%2==0)
   even is a generator object

   even.__next__() : call to get next number

   More complex form of iterator can be constructed using yield	
   E.g:
	def fibonacci():
		f1, f2 = 0, 1

		while True:
			yield f2
			f1, f2 = f2, f1+f2

	f = fibonacci() # f is a generator/iterator
	[next(f) for i in range (20)] # construct a list using generator, next() is the shorthand call for __next__()


9. Big(O) notation is the time complexity behaviour of an algorithm as the input data set grows.
   O in this means order of operations.
   There is also a concept of space complexity or memory usage, like whether an algorithm can be sorted in place,
   or with constant memory or will it use extra memory to store intermediate results.

   Least to Most time complexity (ascending order of time complexity) of few of the known algorithms are as follows

   1. Constant time : O(1)
        - Looking up a single element in an array

   2. Logarithmic time : O(log n)
        - Binary search performed on a sorted array has logarithmic complexity

   3. Linear time : O(n)
        - Searching an unsorted array for a specific value


   4. Log linear : O(n log n)
      Complex sorting algorithms like
        (1) Heap sort

        (2) Merge sort
          Temporarily use extra memory to sort and memory need grows linearly with increase in input set.
          Method uses recursion.
          Uses recursion.
          Divide and conquer.
          Stable.
          Not in-place.

        (3) Quick sort (Randomized)
            Quick sort
            Worst case time complexity is quadratic. Best is log linear.
            Its an in-place sorting algorithm.
            Uses recursion.



   5. Quadratic : O(n2)  [ n sqaure]
        (1) Bubble sort - Least efficient
            Remember first element bubbling (outer loop and inner loop)
            In place sorting

        (2) Selection sort
            Simplest
            Logic is, pick the smallest number from input list, put in the lowest possible index,
            iMin logic.

        (3) Insertion sort
            Is slightly better than selection and bubble.

        (4)

    An algorithm that is deterministic always produces the same outputs from a given set of inputs.
